#!/usr/bin/env bash

# Backend aliases required by API
btools_vbar()   { echo -n -;  sleep 0.1; echo -ne '\b'; btools_bbar;            }
btools_sbar()   { echo -n /;  sleep 0.1; echo -ne '\b'; btools_vbar;            }
btools_bbar()   { echo -n \\; sleep 0.1; echo -ne '\b'; btools_hbar;            }
btools_hbar()   { echo -n \|; sleep 0.1; echo -ne '\b'; btools_sbar;            }
btools_bar()    { tput civis; while true; do btools_vbar; done;                 }
btools_load()   { btools_bar & btools_lpid=$!;                                  }
btools_unload() { tput cnorm; kill "$btools_lpid" &>/tmp/task && echo -ne '\b'; }
btools_sigint() { btools_exit "\n\u2717 User interrupted"; return 1;            }
btools_report() { echo "Please report defects to <briansalehi@proton.me>";      }
btools_defect() { cat /tmp/task; btools_report;                                 }
btools_exit()   { btools_unload; echo -e "\e[1;31m$1\e[0m"; btools_defect;      }
btools_rewind() { btools_unload; echo -ne "\e[1;31m\u2717\e[0m "; return 1;     }
btools_check()  { btools_unload; echo -e  "\e[1;32m\u2713\e[0m ";               }
btools_failed() { [ $? -eq 130 ] && return 0; btools_rewind; return 1;          }
btools_wait()   { btools_step "$1"; wait $btools_tpid || return $?;             }
btools_start()  { eval "$2" &>/tmp/task & btools_tpid=$!; btools_wait "$1";     }
btools_step()   { echo -n  "$1 "; btools_load; trap 'btools_sigint' INT;        }
btools_error()  { echo -e "\e[1;31m$1\e[0m"; btools_defect; return 1;           }
btools_warn()   { echo -e  "\e[1;31m$1\e[0m"; return 1;                         }
btools_skip()   { echo -e  "\e[1;33m$1\e[0m"; return 1;                         }

# Use APIs
task()   { if btools_start "$1" "$2"; then btools_check; else btools_failed || btools_error "$3"; fi; }
try()    { if btools_start "$1" "$2"; then btools_check; else btools_failed || btools_warn  "$3"; fi; }
option() { if btools_start "$1" "$2"; then btools_check; else btools_failed || btools_skip  "$3"; fi; }
