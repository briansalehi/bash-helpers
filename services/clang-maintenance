#!/usr/bin/env bash

prefix_path="${PREFIX_PATH:-$HOME/.local}"
source_path="$prefix_path/src"
preferred_version="${1:+llvmorg-}${1}"

error()   { echo -e "\033[1;31m$*\033[0m" >&2; exit 1; }
notice()  { echo -e "\033[1;35m$*\033[0m"; }
success() { echo -e "\033[1;32m$*\033[0m"; }
code()    { echo -e "\n\t$*\n"; }

[ -d "${source_path}" ] || mkdir -p "${source_path}" || error "Cannot create ${source_path}"

cd "${source_path}" || error "Cannot move to ${source_path}"

if [ -d "${source_path}/llvm-project" ]
then
    notice "Cleaning repository"
    cd llvm-project || error "Failed to move into ${source_path}/llvm-project directory"
    git status | sed -n '/^Untracked files:$/,/^$/{1,3d;p}' | xargs rm -rf

    notice "Updating repository"
    git checkout main &>/dev/null
    git pull origin --prune --tags | grep '[0-9]\+ files changed, [0-9]\+ insertions(+), [0-9]\+ deletions(-)'
else
    notice "Cloning repository"
    git clone https://github.com/llvm/llvm-project.git || error "Cloning failed"
    cd llvm-project || error "${source_path}/llvm-project directory does not exist"
fi

# all available versions
notice "Fetching version list"
read -ra versions <<< "$(git tag --sort version:refname | grep -E 'llvmorg-[0-9.]+$' | tac | xargs)"

if [ -n "$preferred_version" ]
then
    if grep -q "$preferred_version" <<< "${versions[*]}"
    then
        required_version="$preferred_version"
    else
        error "Preffered version ${preferred_version} does not exist"
    fi
else
    required_version="${versions[0]}"
fi

current_version=

if [ -x "${prefix_path}/bin/clang" ]
then
    current_version="llvmorg-$("${prefix_path}/bin/clang" --version | sed -En 's/.*[^0-9](([0-9]+\.){2}[0-9]+).*/\1/p;q')"

    if [ "${current_version}" == "${required_version}" ]
    then
        if [ -n "${preferred_version}" ]
        then
            success "$(basename "${0%%-*}") already using version ${required_version}"
        else
            success "$(basename "${0%%-*}") already using latset version ${required_version}"
        fi
        exit 0
    fi
fi

notice "Switching to version ${required_version}"
git checkout "${required_version}" || error "Failed to checkout to ${required_version} release tag"

notice "Configuring"
cmake -S llvm -B build -G 'Ninja' -D CMAKE_INSTALL_PREFIX="${prefix_path}" -D CMAKE_BUILD_TYPE=Release -D LLVM_ENABLE_PROJECTS="clang;lldb;clang-tools-extra;lld;cross-project-tests" -D LLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" -D LLVM_ENABLE_ASSERTIONS=ON -D LLVM_PARALLEL_COMPILE_JOBS=$(($(nproc) / 2 + 1)) -D LLVM_PARALLEL_LINK_JOBS=$(($(nproc) / 2 + 1)) -D LLVM_PARALLEL_TABELGEN_JOBS=$(($(nproc) / 2 + 1)) --fresh || error "Configuring failed"
notice "Building"
cmake --build build --parallel $(($(nproc) / 2 + 1)) --target all        || error "Building failed"
notice "Checking"
cmake --build build --parallel $(($(nproc) / 2 + 1)) --target check-llvm || error "Building failed"
notice "Installing"
cmake --install build || error "Installation failed"

success "Make executables visible by updating your PATH:"
code "include_path ${prefix_path/$HOME/\$HOME}/bin"
