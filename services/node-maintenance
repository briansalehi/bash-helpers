#!/usr/bin/env bash

error()   { echo -e "\033[1;31m$*\033[0m" >&2; exit 1; }
notice()  { echo -e "\033[1;35m$*\033[0m"; }
success() { echo -e "\033[1;32m$*\033[0m"; }
code()    { echo -e "\n\t$*\n"; }

export NVM_DIR="$HOME/.nvm"

if [ -d "$NVM_DIR" ] && [ -d "$NVM_DIR/.git" ]
then
    [ -h "$NVM_DIR/nvm.sh" ] && [ ! -s "$NVM_DIR/nvm.sh" ] && unlink "$NVM_DIR/nvm.sh"
    (
        cd "$NVM_DIR"
        git fetch --tags origin
        git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
    ) && \. "$NVM_DIR/nvm.sh" && success "nvm updated"
else
    [ -d "$NVM_DIR" ] && rm -r "$NVM_DIR"
    (
        git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
        cd "$NVM_DIR"
        git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
    ) && \. "$NVM_DIR/nvm.sh" && success "nvm installed"
fi

source "$HOME/.nvm/nvm.sh"

current_version="$(nvm version)"
latest_version="$(nvm version-remote)"

if [ "${current_version}" == "${latest_version}" ]
then
    success "${0%%-*} already on latest version" && exit 0
fi

nvm install-latest-npm || error "Failed to install latest npm"
nvm install "${latest_version}" || error "Failed to install latest node version ${latest_version}"
nvm use "${latest_version}" || error "Failed to switch node to version ${latest_version}"
nvm alias default "${latest_version}" || error "Failed to set new version ${latest_version} as default"
nvm uninstall "${current_version}" || error "Failed to uninstall previous version ${current_version}"
